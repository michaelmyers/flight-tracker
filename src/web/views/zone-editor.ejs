<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ZONE EDITOR // FLIGHT TRACKER</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/public/css/retro-crt.css">
  <style>
    .zone-editor {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    .editor-header {
      text-align: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 2px solid var(--green-medium);
    }

    .zone-list {
      margin-bottom: 30px;
    }

    .zone-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      border: 1px solid var(--green-dark);
      background: rgba(0, 255, 0, 0.02);
      margin-bottom: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .zone-item:hover {
      background: rgba(0, 255, 0, 0.05);
      border-color: var(--green-medium);
    }

    .zone-item.selected {
      background: rgba(0, 255, 0, 0.1);
      border-color: var(--green-bright);
    }

    .zone-name {
      font-size: 20px;
      color: var(--green-bright);
    }

    .zone-altitude {
      color: var(--green-medium);
      font-size: 16px;
    }

    .edit-button {
      padding: 8px 16px;
      border: 1px solid var(--green-medium);
      background: rgba(0, 255, 0, 0.05);
      color: var(--green-bright);
      cursor: pointer;
      font-family: "VT323", monospace;
      font-size: 18px;
      transition: all 0.3s ease;
    }

    .edit-button:hover {
      background: rgba(0, 255, 0, 0.1);
      border-color: var(--green-bright);
    }

    .editor-panel {
      display: none;
      padding: 20px;
      border: 2px solid var(--green-medium);
      background: rgba(0, 255, 0, 0.03);
      margin-top: 30px;
    }

    .editor-panel.active {
      display: block;
    }

    .editor-title {
      color: var(--green-bright);
      font-size: 24px;
      margin-bottom: 20px;
      border-bottom: 1px solid var(--green-medium);
      padding-bottom: 10px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      color: var(--green-medium);
      font-size: 18px;
      margin-bottom: 5px;
    }

    .form-input {
      width: 100%;
      padding: 10px;
      background: rgba(0, 255, 0, 0.05);
      border: 1px solid var(--green-medium);
      color: var(--green-bright);
      font-family: "VT323", monospace;
      font-size: 20px;
    }

    .form-input:focus {
      outline: none;
      border-color: var(--green-bright);
      background: rgba(0, 255, 0, 0.08);
    }

    /* Fix dropdown option styling */
    select option {
      background: #000;
      color: var(--green-bright);
      padding: 5px;
    }

    select option:hover {
      background: rgba(0, 255, 0, 0.1);
    }

    .form-help {
      color: var(--green-dark);
      font-size: 14px;
      margin-top: 5px;
    }

    .form-buttons {
      display: flex;
      gap: 10px;
      margin-top: 30px;
    }

    .form-button {
      padding: 12px 24px;
      border: 1px solid var(--green-medium);
      background: rgba(0, 255, 0, 0.05);
      color: var(--green-bright);
      cursor: pointer;
      font-family: "VT323", monospace;
      font-size: 20px;
      transition: all 0.3s ease;
    }

    .form-button:hover {
      background: rgba(0, 255, 0, 0.1);
      border-color: var(--green-bright);
    }

    .form-button.primary {
      background: rgba(0, 255, 0, 0.1);
      border-color: var(--green-bright);
    }

    .form-button.primary:hover {
      background: rgba(0, 255, 0, 0.2);
      box-shadow: 0 0 10px var(--green-dark);
    }

    .status-message {
      padding: 10px;
      margin: 10px 0;
      border: 1px solid var(--green-medium);
      background: rgba(0, 255, 0, 0.05);
      color: var(--green-bright);
      display: none;
    }

    .status-message.success {
      border-color: var(--green-bright);
      background: rgba(0, 255, 0, 0.1);
    }

    .status-message.error {
      border-color: #ff6b6b;
      color: #ff6b6b;
      background: rgba(255, 107, 107, 0.1);
    }

    .status-message.visible {
      display: block;
    }
  </style>
</head>
<body>
  <div class="crt-container">
    <div class="screen-border">
      <div class="zone-editor">
        <div class="editor-header">
          <h1>ZONE EDITOR</h1>
          <p style="color: var(--green-medium);">Configure altitude limits for tracking zones</p>
        </div>

        <nav style="display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; padding: 15px; background: rgba(0, 255, 0, 0.02); border: 1px solid var(--green-dark);">
          <a href="/admin" style="color: var(--green-bright); text-decoration: none; padding: 10px 20px; border: 1px solid var(--green-medium); background: rgba(0, 255, 0, 0.05);">Dashboard</a>
          <a href="/admin/zones" style="color: var(--green-bright); text-decoration: none; padding: 10px 20px; border: 1px solid var(--green-bright); background: rgba(0, 255, 0, 0.15);">Zones</a>
          <a href="/admin/alerts" style="color: var(--green-bright); text-decoration: none; padding: 10px 20px; border: 1px solid var(--green-medium); background: rgba(0, 255, 0, 0.05);">Alerts</a>
          <a href="/admin/docs" style="color: var(--green-bright); text-decoration: none; padding: 10px 20px; border: 1px solid var(--green-medium); background: rgba(0, 255, 0, 0.05);">Documentation</a>
          <a href="/admin/api" style="color: var(--green-bright); text-decoration: none; padding: 10px 20px; border: 1px solid var(--green-medium); background: rgba(0, 255, 0, 0.05);">API</a>
        </nav>

        <div class="status-message" id="statusMessage"></div>

        <div class="zone-list">
          <h2 style="color: var(--green-bright); margin-bottom: 20px;">AVAILABLE ZONES</h2>
          <% areas.forEach(function(area) { %>
            <div class="zone-item" data-zone-id="<%= area.id %>">
              <div>
                <div class="zone-name"><%= area.name %></div>
                <div class="zone-altitude">
                  <% if (area.min_altitude !== null || area.max_altitude !== null) { %>
                    Altitude:
                    <%= area.min_altitude !== null ? area.min_altitude + ' ft' : '0 ft' %> -
                    <%= area.max_altitude !== null ? area.max_altitude + ' ft' : 'unlimited' %>
                  <% } else { %>
                    No altitude limits
                  <% } %>
                </div>
              </div>
              <button class="edit-button" onclick="editZone(<%= area.id %>)">EDIT</button>
            </div>
          <% }); %>
        </div>

        <div class="editor-panel" id="editorPanel">
          <div class="editor-title" id="editorTitle">EDIT ZONE</div>

          <form id="editForm">
            <input type="hidden" id="zoneId" value="">

            <div class="form-group">
              <label class="form-label" for="zoneName">Zone Name</label>
              <input type="text" class="form-input" id="zoneName" placeholder="Enter zone name">
            </div>

            <div class="form-group">
              <label class="form-label" for="minAltitude">Minimum Altitude (feet)</label>
              <input type="number" class="form-input" id="minAltitude" min="0" placeholder="Leave empty for ground level">
              <div class="form-help">Aircraft below this altitude will be ignored</div>
            </div>

            <div class="form-group">
              <label class="form-label" for="maxAltitude">Maximum Altitude (feet)</label>
              <input type="number" class="form-input" id="maxAltitude" min="0" placeholder="Leave empty for no limit">
              <div class="form-help">Aircraft above this altitude will be ignored</div>
            </div>

            <div class="form-buttons">
              <button type="submit" class="form-button primary">SAVE CHANGES</button>
              <button type="button" class="form-button" onclick="cancelEdit()">CANCEL</button>
            </div>
          </form>
        </div>

        <div style="text-align: center; margin-top: 40px;">
          <a href="/admin/zones" style="color: var(--green-medium); text-decoration: none;">‚Üê Back to Zone Management</a>
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentZone = null;
    const zones = <%- JSON.stringify(areas) %>;

    function editZone(zoneId) {
      currentZone = zones.find(z => z.id === zoneId);

      if (!currentZone) {
        showStatus('Zone not found', 'error');
        return;
      }

      // Populate form
      document.getElementById('zoneId').value = currentZone.id;
      document.getElementById('zoneName').value = currentZone.name;
      document.getElementById('minAltitude').value = currentZone.min_altitude !== null ? currentZone.min_altitude : '';
      document.getElementById('maxAltitude').value = currentZone.max_altitude !== null ? currentZone.max_altitude : '';

      // Update editor title
      document.getElementById('editorTitle').textContent = `EDIT ZONE: ${currentZone.name}`;

      // Show editor panel
      document.getElementById('editorPanel').classList.add('active');

      // Highlight selected zone
      document.querySelectorAll('.zone-item').forEach(item => {
        item.classList.toggle('selected', item.dataset.zoneId === String(zoneId));
      });

      // Scroll to editor
      document.getElementById('editorPanel').scrollIntoView({ behavior: 'smooth' });
    }

    function cancelEdit() {
      document.getElementById('editorPanel').classList.remove('active');
      document.querySelectorAll('.zone-item').forEach(item => {
        item.classList.remove('selected');
      });
      currentZone = null;
    }

    function showStatus(message, type = 'success') {
      const statusEl = document.getElementById('statusMessage');
      statusEl.textContent = message;
      statusEl.className = `status-message ${type} visible`;

      setTimeout(() => {
        statusEl.classList.remove('visible');
      }, 5000);
    }

    // Handle form submission
    document.getElementById('editForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const zoneId = document.getElementById('zoneId').value;
      const name = document.getElementById('zoneName').value;
      const minAlt = document.getElementById('minAltitude').value;
      const maxAlt = document.getElementById('maxAltitude').value;

      // Prepare update object
      const updates = {};

      if (name && name !== currentZone.name) {
        updates.name = name;
      }

      // Handle altitude values
      if (minAlt === '') {
        updates.min_altitude = null;
      } else {
        const min = parseInt(minAlt);
        if (!isNaN(min) && min >= 0) {
          updates.min_altitude = min;
        }
      }

      if (maxAlt === '') {
        updates.max_altitude = null;
      } else {
        const max = parseInt(maxAlt);
        if (!isNaN(max) && max >= 0) {
          updates.max_altitude = max;
        }
      }

      // Validate min < max
      if (updates.min_altitude !== undefined && updates.max_altitude !== undefined &&
          updates.min_altitude !== null && updates.max_altitude !== null &&
          updates.min_altitude > updates.max_altitude) {
        showStatus('Minimum altitude cannot be greater than maximum altitude', 'error');
        return;
      }

      try {
        const response = await fetch(`/api/zones/${zoneId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(updates)
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || 'Failed to update zone');
        }

        const updatedZone = await response.json();

        // Update local data
        const index = zones.findIndex(z => z.id === parseInt(zoneId));
        if (index !== -1) {
          zones[index] = updatedZone;
        }

        // Update UI
        const zoneItem = document.querySelector(`[data-zone-id="${zoneId}"]`);
        if (zoneItem) {
          const nameEl = zoneItem.querySelector('.zone-name');
          const altEl = zoneItem.querySelector('.zone-altitude');

          if (nameEl) nameEl.textContent = updatedZone.name;

          if (altEl) {
            if (updatedZone.min_altitude !== null || updatedZone.max_altitude !== null) {
              const minText = updatedZone.min_altitude !== null ? updatedZone.min_altitude + ' ft' : '0 ft';
              const maxText = updatedZone.max_altitude !== null ? updatedZone.max_altitude + ' ft' : 'unlimited';
              altEl.textContent = `Altitude: ${minText} - ${maxText}`;
            } else {
              altEl.textContent = 'No altitude limits';
            }
          }
        }

        showStatus('Zone updated successfully', 'success');
        cancelEdit();
      } catch (error) {
        console.error('Error updating zone:', error);
        showStatus(error.message || 'Failed to update zone', 'error');
      }
    });
  </script>
</body>
</html>